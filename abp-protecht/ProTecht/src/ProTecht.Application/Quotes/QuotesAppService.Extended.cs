using ProTecht.People;
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using ProTecht.Permissions;
using ProTecht.Quotes;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using ProTecht.Shared;
using ProTecht.Clients;

namespace ProTecht.Quotes
{
    public class QuotesAppService : QuotesAppServiceBase, IQuotesAppService
    {
        //<suite-custom-code-autogenerated>
        public QuotesAppService(IQuoteRepository quoteRepository, QuoteManager quoteManager, IDistributedCache<QuoteDownloadTokenCacheItem, string> downloadTokenCache, IRepository<ProTecht.People.Person, Guid> personRepository)
            : base(quoteRepository, quoteManager, downloadTokenCache, personRepository)
        {
        }
        //</suite-custom-code-autogenerated>
        public readonly IInsureITAPI insureITAPI;
        public readonly IVehiCoverAPI vehiCoverAPI;
        public QuotesAppService(IQuoteRepository quoteRepository, QuoteManager quoteManager, IDistributedCache<QuoteDownloadTokenCacheItem, string> downloadTokenCache, IRepository<ProTecht.People.Person, Guid> personRepository, IInsureITAPI insureITAPI, IVehiCoverAPI vehiCoverAPI)
    : base(quoteRepository, quoteManager, downloadTokenCache, personRepository)
        {
            this.insureITAPI = insureITAPI;
            this.vehiCoverAPI = vehiCoverAPI;
        }
        //Write your custom code...
        [Authorize(ProTechtPermissions.Quotes.Create)]
        public override async Task<QuoteDto> CreateAsync(QuoteCreateDto input)
        {

            var quote = await _quoteManager.CreateAsync(
            input.PersonId, input.Vendor, input.Amount
            );

            var vehiQuote = await vehiCoverAPI.GetQuoteAsync(new Shared.RequestDTOs.VehicoverQuoteRequestDto()
            {
                Age = 12,
                ContactNumber = "645640",
                Name = "Sam",
                Surname = "Smith",
                VehicleRegistration = "euerohue",
                VehicleType = "2"
            });

            var insureIt = await insureITAPI.GetQuoteAsync();
            return ObjectMapper.Map<Quote, QuoteDto>(quote);
        }
    }
}